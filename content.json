{"meta":{"title":"KR","subtitle":"随心所欲","description":"做自己想做的事","author":"umlink","url":"https://umlink.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-09-30T09:41:59.375Z","updated":"2019-09-30T09:41:59.374Z","comments":false,"path":"/404.html","permalink":"https://umlink.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-31T01:54:44.987Z","updated":"2021-03-31T01:54:44.987Z","comments":false,"path":"about/index.html","permalink":"https://umlink.github.io/about/index.html","excerpt":"","text":"基本信息 成功由一系列可预知的、强而有力的优势环境和机遇构成. 姓名： 赵富林 职业：前端开发工程师 毕业院校：天津城建大学（2012~2016） 专业：软件工程 性别：男 身高：182cm 生日：1993 工作经历 爱好"},{"title":"书单","date":"2021-03-24T16:22:12.044Z","updated":"2021-03-24T16:22:12.044Z","comments":true,"path":"books/index.html","permalink":"https://umlink.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-03-24T16:21:26.954Z","updated":"2021-03-24T16:21:26.954Z","comments":false,"path":"categories/index.html","permalink":"https://umlink.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-24T16:13:58.372Z","updated":"2021-03-24T16:13:58.372Z","comments":true,"path":"links/index.html","permalink":"https://umlink.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-09-30T09:20:30.466Z","updated":"2019-09-30T09:20:30.466Z","comments":false,"path":"repository/index.html","permalink":"https://umlink.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-30T09:41:59.375Z","updated":"2019-09-30T09:41:59.374Z","comments":false,"path":"tags/index.html","permalink":"https://umlink.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何查看服务端日志?","slug":"view-log","date":"2021-03-30T01:59:41.000Z","updated":"2021-03-30T02:48:54.104Z","comments":true,"path":"2021/03/30/view-log/","link":"","permalink":"https://umlink.github.io/2021/03/30/view-log/","excerpt":"","text":"一、直接查看文件内容 cat [-AbEnTv] 选项与参数 -A ：相当于-vET的整合， 课列出一些特殊字符而不是空白而已 -b ：列出行号，进针对非空白行做行号显示，空白行不会标记 -E ：将结尾换行符$显示出来 -n ：打印出行号，连同空白行也会有行号，与-b的选项不同 -T : 将[tab]键以^I显示出来 -v : 列出一些看不出来的特殊字符 tac（和cat打印顺序相反） 二、翻页查看 less less可前后翻页，不止向上查找，也可向下查找 按键/命令 [pagedown] ：向下翻页 [pageup] ：向上翻页 /字符串：在当前显示的内容（翻页进度位置），向下查找这个字符串关键字 ?字符串：向上查找字符串 n ：重复前一个查找，与/或?有关， 比如前一个命令是？表示向上查找，此时n会向上查找 N ：反向的重复前一个查找 g ：跳转到当前文件数据的第一行 G ：跳转到当前文件数据的最后一行 q ：退出当前文件的浏览 三、数据截取 head head命令用来提取文件的前n行，一般配合使用-n选项。当指定的行数为负数-x时，则会打印出除了后面x行的其他所有数据。 1head -n 10 error.log tail 从文件尾部截取数据。tail也是工作中最常用的命令，因为可以利用-f选项，一直刷新获取文件尾部最新数据。 选项与参数 -n : 查看后n行数据，注意当n后面值带“+”号表示从第x行开始， 如 tail -n +1000 test.txt -f : 展示文件后面 四、筛选日志 grep example：查看文件包含 ‘hello’ 12cat -n error.txt | grep &#39;hello&#39;tail -200f error.log | grep &#39;hello&#39; 五、其它 &gt;&gt; : 文件追加重定向命令 example：将 test.txt 的最后10行复制到hello.txt中 1tail -n 10 test.txt &gt;&gt; hello.txt 六、组合使用示例example: 查看文件 10 ~ 20 行 123head -n 20 text.txt | tail -n 10cat -n test.txt | head -n 20 | tail -n 10 参考文献：https://juejin.cn/post/6844904069627133966","categories":[{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"}]},{"title":"webpack 优化思路","slug":"opt-webpack","date":"2021-03-25T02:01:34.000Z","updated":"2021-03-25T02:02:49.304Z","comments":true,"path":"2021/03/25/opt-webpack/","link":"","permalink":"https://umlink.github.io/2021/03/25/opt-webpack/","excerpt":"","text":"优化方向 webpack-bundle-analyzer：文件大小分析 speed-measure-webpack-plugin 打包耗时分析 使用高版本的 webpack 和 nodejs 按需引入 搜小查找范围（loader） exclude/include (确定 loader 规则范围) resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找) resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段) resolve.extensions 尽可能减少后缀尝试的可能性 noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句) IgnorePlugin (完全排除模块) 合理使用alias 缓存 多进程/多实例构建：HappyPack(不维护了)、thread-loader 代码压缩 图片压缩或外链（压缩） 样式分离 （mini-css-extract-plugin） DLL 动态链接库 CommonsChunkPlugin =&gt; optimization.splitChunks 和 optimization.runtimeChunk CommonsChunkPlugin 公用包的抽离【react、lodash、moment、vue、vue-loaderK】 optimization.splitChunks.chunks: “all” 当前模块是公共模块（多处引用）或者模块来自 node_modules 当前模块大小大于 30kb 如果此模块是按需加载，并行请求的最大数量小于等于 5 如果此模块在初始页面加载，并行请求的最大数量小于等于 3","categories":[{"name":"webpack","slug":"webpack","permalink":"https://umlink.github.io/categories/webpack/"}],"tags":[{"name":"javascirpt","slug":"javascirpt","permalink":"https://umlink.github.io/tags/javascirpt/"},{"name":"nodejs","slug":"nodejs","permalink":"https://umlink.github.io/tags/nodejs/"}]},{"title":"ajax-hooks","slug":"ajax-hooks","date":"2021-03-25T01:58:25.000Z","updated":"2021-03-25T01:59:19.352Z","comments":true,"path":"2021/03/25/ajax-hooks/","link":"","permalink":"https://umlink.github.io/2021/03/25/ajax-hooks/","excerpt":"","text":"方法一：new实例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class AnyXHR &#123; constructor (beforeHooks = &#123;&#125;, afterHooks = &#123;&#125;) &#123; this.XHR = window.XMLHttpRequest this.beforeHooks = beforeHooks this.afterHooks = afterHooks this.init() &#125; init () &#123; let _this = this window.XMLHttpRequest = function () &#123; this._xhr = new _this.XHR() _this.overWrite(this) &#125; &#125; overWrite (proxyXHR) &#123; for (let key in proxyXHR._xhr) &#123; if (typeof proxyXHR._xhr[key] === &#x27;function&#x27;) &#123; this.overwriteMethod(key, proxyXHR) continue &#125; &#125; &#125; overwriteMethod (key, proxyXHR) &#123; let beforeHooks = this.beforeHooks let afterHooks = this.afterHooks proxyXHR[key] = (...args) =&gt; &#123; // 前置钩子 可拦截 if (beforeHooks[key] &amp;&amp; (beforeHooks[key].call(proxyXHR._xhr, args) === false)) return // 执行原生方法 const res = proxyXHR._xhr[key].apply(proxyXHR._xhr, args) // 后置钩子 afterHooks[key] &amp;&amp; afterHooks[key].call(proxyXHR._xhr, res) return res &#125; &#125;&#125;new AnyXHR(&#123; open: function (args) &#123; console.log(&#x27;前置钩子执行&#x27;) console.log(&#x27;open&#x27;, args) &#125;, onreadystatechange: function (args) &#123; console.log(&#x27;onreadystatechange&#x27;, args) &#125;&#125;, &#123; open: function () &#123; console.log(&#x27;后置钩子执行&#x27;) &#125;&#125;) 方法二：劫持原型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const ajaxHooks = &#123; init: function (hooks) &#123; let &#123; open = null, send = null &#125; = hooks; if (typeof window === &#x27;undefined&#x27;) return; const _openPrototype = window.XMLHttpRequest.prototype.open; const _sendPrototype = window.XMLHttpRequest.prototype.send; const openReplacement = function(openHook, openPrototype) &#123; return function (method, url, async, user, password) &#123; openHook.apply(this, arguments) return openPrototype.apply(this, arguments) &#125; &#125; const getHookByProps = props =&gt; &#123; return function () &#123; hooks[props] &amp;&amp; hooks[props].apply(this, arguments) this[`_$&#123;props&#125;`] &amp;&amp; this[`_$&#123;props&#125;`].apply(this, arguments); &#125; &#125; const sendReplacement = function(sendHook, sendPrototype) &#123; return function () &#123; const onMappingKeyList = [ onreadystatechange, onloadstart, onloadend, onerror, ontimeout, onabort ] onMappingKeyList.forEach(key =&gt; &#123; this[&#x27;_&#x27; + key] = this[key] ? this[key] : null; this[key] = getHookByProps(key) &#125;) sendHook.apply(this, arguments) return sendPrototype.apply(this, arguments) &#125; &#125; window.XMLHttpRequest.prototype.open = openReplacement(open, _openPrototype) window.XMLHttpRequest.prototype.send = sendReplacement(send, _sendPrototype) &#125;&#125;export default ajaxHooks","categories":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/tags/javascript/"}]},{"title":"关于页面的平滑滚动","slug":"smooth-scroll","date":"2021-03-25T01:54:43.000Z","updated":"2021-03-25T01:57:05.594Z","comments":true,"path":"2021/03/25/smooth-scroll/","link":"","permalink":"https://umlink.github.io/2021/03/25/smooth-scroll/","excerpt":"","text":"1. toTop123456789const scrollToTop = () =&gt; &#123; const c = document.documentElement.scrollTop || document.body.scrollTop; if (c &gt; 0) &#123; window.requestAnimationFrame(scrollToTop); window.scrollTo(0, c - c / 8); &#125;&#125;;scrollToTop(); 2. to 指定位置const smoothScroll = element =&gt; document.querySelector(element).scrollIntoView(&#123; behavior: &#39;smooth&#39; &#125;); smoothScroll(&#39;#fooBar&#39;); smoothScroll(&#39;.fooBar&#39;);","categories":[{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/categories/javascript/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/tags/chrome/"}]},{"title":"浏览器拿到 html 到渲染成页面发生了什么？","slug":"html-page","date":"2021-03-25T01:49:28.000Z","updated":"2021-03-25T01:52:57.730Z","comments":true,"path":"2021/03/25/html-page/","link":"","permalink":"https://umlink.github.io/2021/03/25/html-page/","excerpt":"","text":"一、从获得 Html 到页面渲染的全部流程1.1 DOM 树构建渲染器进程接受到的数据也就是 HTML。渲染器进程的核心任务就是把 html、css、js、image 等资源渲染成用户可以交互的 web 页面。渲染器进程的主线程将 html 进行解析，构造 DOM 数据结构。DOM 也就是文档对象模型，是浏览器对页面在其内部的表示形式，是 web 开发程序员可以通过 JS 与之交互的数据结构和 API。html 首先通过 tokeniser 标记化，通过词法分析将输入的 html 内容解析成多个标记，根据识别后的标记进行 DOM 树构造，在 DOM 树构建过程中会创建 document 对象，然后以 document 的为根节点的 DOM 树，不断进行修改，向其中添加各种元素。 1.2 渲染阻塞html 代码中往往会引入一些额外的资源，比如图片、CSS、JS 脚本等，图片和 CSS 这些资源需要通过网络下载或从缓存中直接加载，这些资源不会阻塞 html 的解析，因为他们不会影响 DOM 树的生成，但当 HTML 解析过程中遇到 script 标签，就会停止 html 解析流程，转而去加载解析并且执行 JS。这是因为浏览器并不知道 JS 执行是否会改变当前页面的 HTML 结构，如果 JS 代码里用了 document.write 方法来修改 html，之前的和 html 解析就没有任何意义了，这也就是为什么我们一直说要把 script 标签要放在合适的位置，或者使用 async 或 defer 属性来异步加载执行 JS。 1.3 Layout Tree在 html 解析完成后，我们就会获得一个 DOM Tree（树），但我们还不知道 DOM Tree 上的每个节点应该长什么样子，主线程需要解析 CSS，并确定每个 DOM 节点的计算样式，即使你没有提供自定义的 CSS 样式，浏览器会有自己默认的样式表，比如 h2 的字体要比 h3 的大。在知道 DOM 结构和每个节点的样式后，我们接下来需要知道每个节点需要放在页面上的哪个位置，也就是节点的坐标以及该节点需要占用多大的区域，这个阶段被称为 layout 布局，主线程通过遍历 dom 和计算好的样式来生成 Layout Tree。Layout Tree 上的每个节点都记录了 x、y 坐标和边框尺寸。这需要注意的是 DOM Tree 和 Layout Tree 并不是一一对应的，设置了 display:none 的节点不会出现在 Layout Tree 上，而在 before 伪类中添加了 content 值的元素 content 中的内容会出现在 Layout Tree 上，不会出现在 DOM 树里，这是因为 DOM 是通过 HTML 解析获得的，并不关系样式，而 Layout Tree 是根据 DOM 和计算好的样式来生成，Layout Tree 是和最后展示在屏幕上节点是对应的。 1.4 绘制（paint）现在我们已经知道了元素的大小形状和位置，但还不知道以什么样的顺序绘制（paint）这个节点，例如 z-index 这个属性会影响节点绘制的层级关系，如果按照 dom 的层级结构来绘制页面则会导致错误的渲染。所以为了保证在屏幕上展示正确的层级，主线程遍历 Layout Tree 创建一个绘制记录表（Paint Record），该表记录了绘制的顺序，这个阶段配称为绘制（Paint）。 1.5 栅格化现在知道了文档的绘制顺序，终于到了该把这些信息转化成像素点显示在屏幕上了，这个行为被称为栅格化（Rastering）。chrome 最早使用了一种很简单的方式，只栅格化用户可视区域的内容，当用户滚动页面时，再栅格化更多的内容来填充缺失的部分，这种方式带来的问题就是会导致展示延迟。现在 chrome 进行了优化升级，使用了一种更为复杂的栅格化流程叫做合成（compositing），合成是一种将页面各个部分分成多个图层，分别对其进行栅格化，并在合成器线程（compositor Thread）中单独进行合成页面，简单来说就是页面所有的元素按照某种规则进行分图层，并把图层都栅格化好了，然后只需要把可视区的内容组合成一帧展示给用户即可。 1.6 layer tree主线程遍历 Layout Tree 生成 layer tree，当 Layer Tree 生成完毕和绘制顺序确定后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分为许多图块（tiles），然后将每个图块发送给栅格化线程（Raster Thread），栅格化线程栅格化每个图块，并将他们存储在 GPU 内存中，当图块栅格化完成后，合成器线程将收集成为 draw quads 的图块信息，这些信息里记录了图块在内存中的位置和在页面的那个位置绘制图块的信息，根据这些信息合成器线程生成一个合成器帧（Compositor Frame）然后合成器 Frame（帧）通过 IPC 传递给浏览器进程，接着浏览器进程将合成器帧传送到 GPU，然后 GPU 渲染展示到屏幕上。当页面发生变化时，比如滚动了当前的页面，都会生成一个新的合成器帧，新的帧再传给 GPU，然后再次渲染到屏幕上。 二、为什么栅格线程使用 GPU 计算而不是 CPU 计算？CPU 与 GPU:CPU 和 GPU 作为计算机中最重要的两个计算单元直接决定了计算性能。CPU是计算机的大脑，负责处理各种不同的任务。在过去，大多数 CPU 是单芯片的，核心被安置在同一个芯片上。更新的 CPU 可以支持多核心，运算能力大大加强。而最新的的 cpu 已经达到 10 核心 20 线程数的能力了。GPU是另一个计算机的组成部分，与 CPU 不同，GPU 更擅长利用多核心同时处理单一的任务。像命名那样，GPU 最初被用于处理图像。这就是为什么使用 GPU 可以更快、更顺畅的渲染页面内容。随着 GPU 的发展，越来越多的计算任务也可以使用 GPU 来处理。甚至有人说 GPU 是人工智能的大功臣，可见 GPU 已经不再仅用于图像处理上了。","categories":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"}],"tags":[]},{"title":"linux 查看文件大小","slug":"look-file-size","date":"2021-03-25T01:31:57.000Z","updated":"2021-03-25T01:48:08.360Z","comments":true,"path":"2021/03/25/look-file-size/","link":"","permalink":"https://umlink.github.io/2021/03/25/look-file-size/","excerpt":"","text":"命令及说明查看整个磁盘大小12345678df -h----------输出内容如下：devtmpfs 909M 0 909M 0% /devtmpfs 919M 24K 919M 1% /dev/shmtmpfs 919M 456K 919M 1% /runtmpfs 919M 0 919M 0% /sys/fs/cgroup/dev/vda1 50G 3.3G 44G 7% /tmpfs 184M 0 184M 0% /run/user/0 查看整个磁盘大小1234567891011du -sh *----------输出内容如下：154M bin4.0K etc4.0K games14M include737M lib182M lib6461M libexec562M local52M sbin 查看指定文件大小123du -sk share----------输出内容如下：358428 share 查看前 10 文件大小列表123456789101112du -s * | sort -nr | head----------输出内容如下：2234776 usr933900 var122176 boot39632 etc12884 tmp448 run148 root16 lost+found8 opt4 srv 查看文件个数1ls | wc -l 统计当前文件夹(目录)大小，并按文件大小排序1du -sh * | sort -n du 常用选项1234567-h：以人类可读的方式显示-a：显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小-s：显示目录占用的磁盘空间大小，不要显示其下子目录和文件占用的磁盘空间大小-c：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和--apparent-size：显示目录或文件自身的大小-l ：统计硬链接占用磁盘空间的大小-L：统计符号链接所指向的文件占用的磁盘空间大小","categories":[{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"}]},{"title":"股票大作手回忆录","slug":"股票大作手回忆录","date":"2020-01-21T07:30:25.000Z","updated":"2021-03-24T16:23:29.227Z","comments":true,"path":"2020/01/21/股票大作手回忆录/","link":"","permalink":"https://umlink.github.io/2020/01/21/%E8%82%A1%E7%A5%A8%E5%A4%A7%E4%BD%9C%E6%89%8B%E5%9B%9E%E5%BF%86%E5%BD%95/","excerpt":"","text":"第一章 独立特行的少年赌客人 在个㢟规律性波动中赚钱 第二章 独立特行的少年赌客人 永远不要对时长生气 第三章 重返华尔街遭受重创 适应股市，而不是让股市适应你 第四章 卧薪尝胆三反华尔街 找到正确的操作方法才能赚钱 第五章 “老火鸡”的至理名言 成功的秘诀再约预判大势和百信等待 第六章 最昂贵的一课 听信别人不如相信自己 第七章 老手怀特的故事 判断何时的出手时机（稳住，涨时试探性的买入，不要一味的找低谷买入） 第八章 再次破产后的绝地反击 顺势而为，择机而动","categories":[],"tags":[{"name":"股票","slug":"股票","permalink":"https://umlink.github.io/tags/%E8%82%A1%E7%A5%A8/"}]},{"title":"小计浏览器缓存策略","slug":"cache-control","date":"2020-01-21T06:12:24.000Z","updated":"2021-03-24T16:23:29.268Z","comments":true,"path":"2020/01/21/cache-control/","link":"","permalink":"https://umlink.github.io/2020/01/21/cache-control/","excerpt":"","text":"一、强缓存 缓存未过期只取本地， 资源更新则GG。 Cache-Control public, max-age=xxx Expire 二、协商缓存 每次都请求服务器？ 替换路径？ hash 每次打包时生成的hash,不可用 chunkhash 单独chunk 的hash contenthash 内容变化时的hash 三、ETag &amp; Last-Modified Nginx官方默认的ETag计算方式是为”文件最后修改时间16进制-文件长度16进制”。例：ETag： “59e72c84-2404” Express框架使用了serve-static中间件来配置缓存方案，其中，使用了一个叫etag的npm包来实现etag计算 请求头带上了if-modified-since和if-none-match两个字段，则先判断etag，再判断last-modified","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://umlink.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[{"name":"缓存","slug":"缓存","permalink":"https://umlink.github.io/tags/%E7%BC%93%E5%AD%98/"}]}],"categories":[{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"webpack","slug":"webpack","permalink":"https://umlink.github.io/categories/webpack/"},{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"},{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/categories/javascript/"},{"name":"浏览器","slug":"浏览器","permalink":"https://umlink.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"},{"name":"javascirpt","slug":"javascirpt","permalink":"https://umlink.github.io/tags/javascirpt/"},{"name":"nodejs","slug":"nodejs","permalink":"https://umlink.github.io/tags/nodejs/"},{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/tags/javascript/"},{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/tags/chrome/"},{"name":"股票","slug":"股票","permalink":"https://umlink.github.io/tags/%E8%82%A1%E7%A5%A8/"},{"name":"缓存","slug":"缓存","permalink":"https://umlink.github.io/tags/%E7%BC%93%E5%AD%98/"}]}