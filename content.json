{"meta":{"title":"KR","subtitle":"随心所欲","description":"做自己想做的事","author":"umlink","url":"https://umlink.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-09-30T09:41:59.375Z","updated":"2019-09-30T09:41:59.374Z","comments":false,"path":"/404.html","permalink":"https://umlink.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-31T01:54:44.987Z","updated":"2021-03-31T01:54:44.987Z","comments":false,"path":"about/index.html","permalink":"https://umlink.github.io/about/index.html","excerpt":"","text":"基本信息 成功由一系列可预知的、强而有力的优势环境和机遇构成. 姓名： 赵富林 职业：前端开发工程师 毕业院校：天津城建大学（2012~2016） 专业：软件工程 性别：男 身高：182cm 生日：1993 工作经历 爱好"},{"title":"书单","date":"2021-03-24T16:22:12.044Z","updated":"2021-03-24T16:22:12.044Z","comments":true,"path":"books/index.html","permalink":"https://umlink.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-03-24T16:21:26.954Z","updated":"2021-03-24T16:21:26.954Z","comments":false,"path":"categories/index.html","permalink":"https://umlink.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-24T16:13:58.372Z","updated":"2021-03-24T16:13:58.372Z","comments":true,"path":"links/index.html","permalink":"https://umlink.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-09-30T09:20:30.466Z","updated":"2019-09-30T09:20:30.466Z","comments":false,"path":"repository/index.html","permalink":"https://umlink.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-30T09:41:59.375Z","updated":"2019-09-30T09:41:59.374Z","comments":false,"path":"tags/index.html","permalink":"https://umlink.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"寻找两个正序数组的中位数","slug":"list-middle-num","date":"2021-04-14T01:57:10.000Z","updated":"2021-04-14T02:00:10.300Z","comments":true,"path":"2021/04/14/list-middle-num/","link":"","permalink":"https://umlink.github.io/2021/04/14/list-middle-num/","excerpt":"","text":"给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 来源：力扣（LeetCode）https://leetcode-cn.com/problems/median-of-two-sorted-arrays/ 示例 1： 输入：nums1 = [1,3], nums2 = [2]输出：2.00000解释：合并数组 = [1,2,3] ，中位数 2示例 2： 输入：nums1 = [1,2], nums2 = [3,4]输出：2.50000解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5示例 3： 输入：nums1 = [0,0], nums2 = [0,0]输出：0.00000示例 4： 输入：nums1 = [], nums2 = [1]输出：1.00000示例 5： 输入：nums1 = [2], nums2 = []输出：2.00000 提示： nums1.length == mnums2.length == n0 &lt;= m &lt;= 10000 &lt;= n &lt;= 10001 &lt;= m + n &lt;= 2000-106 &lt;= nums1[i], nums2[i] &lt;= 106 进阶：你能设计一个时间复杂度为 O(log (m+n)) 的算法解决此问题吗？ 题解12345678910111213141516171819&#x2F;** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number&#125; *&#x2F;const formatNum &#x3D; val &#x3D;&gt; &#123; return val.toFixed(5)&#125;const findMedianSortedArrays &#x3D; (nums1, nums2) &#x3D;&gt; &#123; const list &#x3D; nums1.concat(nums2).sort((a, b) &#x3D;&gt; a - b) const listLen &#x3D; list.length if (listLen % 2 &#x3D;&#x3D;&#x3D; 0) &#123; return formatNum((list[listLen &#x2F; 2 - 1] + list[listLen &#x2F; 2]) &#x2F; 2) &#125; else &#123; return formatNum(list[(listLen - 1) &#x2F; 2]) &#125;&#125; 进阶？ 你能设计一个时间复杂度为 O(log (m+n)) 的算法解决此问题吗？","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://umlink.github.io/categories/LeetCode/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://umlink.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"无重复字符的最长子串","slug":"repeat-str-len","date":"2021-04-13T12:22:53.000Z","updated":"2021-04-14T02:00:10.295Z","comments":true,"path":"2021/04/13/repeat-str-len/","link":"","permalink":"https://umlink.github.io/2021/04/13/repeat-str-len/","excerpt":"","text":"给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 来源：力扣（LeetCode）https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/ 示例 1: 输入: s = “abcabcbb”输出: 3解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。示例 2: 输入: s = “bbbbb”输出: 1解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。示例 3: 输入: s = “pwwkew”输出: 3解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。示例 4: 输入: s = “”输出: 0 提示： 0 &lt;= s.length &lt;= 5 * 104s 由英文字母、数字、符号和空格组成 题解123456789101112131415161718192021222324const lengthOfLongestSubstring = str =&gt; &#123; if (!str) return 0 let maxLen = 0 let singleStr = &#x27;&#x27; let subIndex = 0 const strLen = str.length // 若剩余字符长度小于已有最大非重复自串长度直接 return if (strLen &lt; maxLen) return maxLen while (subIndex &lt; str.length) &#123; const tempStr = str.substring(subIndex, strLen) for (let s of tempStr) &#123; if (singleStr.indexOf(s) === -1) &#123; singleStr += s maxLen = singleStr.length &gt; maxLen ? singleStr.length : maxLen &#125; else &#123; subIndex++ singleStr = &#x27;&#x27; break &#125; &#125; &#125; return maxLen&#125;","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://umlink.github.io/categories/LeetCode/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://umlink.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"浏览器 http 状态码及说明","slug":"http-code","date":"2021-04-12T07:42:30.000Z","updated":"2021-04-12T09:07:32.340Z","comments":true,"path":"2021/04/12/http-code/","link":"","permalink":"https://umlink.github.io/2021/04/12/http-code/","excerpt":"","text":"一、信息响应 Code Concept Explain 100 continue 临时响应，表明迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。 101 Switching Protocol 响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。（如websocket 协议升级[切换]） 102 Processing (WebDAV) 示服务器已收到并正在处理该请求，但没有响应可用 103 Early Hints 用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。 二、成功响应 Code Concept Explain 200 ok 表明请求已经成功（PUT 和 DELETE 的请求成功通常并不是响应200 OK的状态码而是 204 No Content 表示无内容(或者 201 Created表示一个资源首次被创建成功)。） 201 Created 该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应 202 Accepted 请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理 203 Non-Authoritative Information 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。 204 Not Content 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。 205 Rest Content 服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。 206 Partial Content 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 207 Multi-Status (WebDAV) 由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。 208 Multi-Status (WebDAV) 在 DAV 里面使用: propstat 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。（em…） 226 IM Used (HTTP Delta encoding) 服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。 三、重定向 Code Concept Explain 300 Multiple Choice 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 301 Moved Permanently 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。（永久成定向） 302 Found 请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。（临时重定向） 303 See Other 对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。 304 Not Modified 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 305 Use Proxy 被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 306 unused 在最新版的规范中，306 状态码已经不再被使用。 307 Temporary Redirect 请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 308 Permanent Redirect 这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。 四、客户端响应 Code Concept Explain 400 Bad Request 1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。 401 Unauthorized 当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。 402 Payment Required 此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用。 403 Forbidden 服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。 404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。 405 Method Not Allowed 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。 406 Not Acceptable 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 407 Proxy Authentication Required 与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。 408 Request Timeout 请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。 409 Conflict 由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 410 Gone 被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。 411 Length Required 服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。 412 Precondition Failed 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。 413 Payload Too Large 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。 414 URI Too Long 请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 415 Unsupported Media Type 对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。 416 Requested Range Not Satisfiable 如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 417 Expectation Failed 此响应代码意味着服务器无法满足 Expect 请求标头字段指示的期望值。 418 I’m a teapot 服务器拒绝尝试用 “茶壶冲泡咖啡”。 421 Misdirected Request 该请求针对的是无法产生响应的服务器。 这可以由服务器发送，该服务器未配置为针对包含在请求 URI 中的方案和权限的组合产生响应。 422 Unprocessable Entity (WebDAV) 请求格式良好，但由于语义错误而无法遵循。 423 Locked (WebDAV) 正在访问的资源被锁定。 424 Failed Dependency (WebDAV) 由于先前的请求失败，所以此次请求失败。 425 Too Early 服务器不愿意冒着风险去处理可能重播的请求。 426 Upgrade Required 服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。 服务器在 426 响应中发送 Upgrade 头以指示所需的协议。 428 Precondition Required 原始服务器要求该请求是有条件的。 旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。 429 Too Many Requests 用户在给定的时间内发送了太多请求（“限制请求速率”）。 431 Request Header Fields Too Large 服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields Too Large）。 请求可以在减小请求头字段的大小后重新提交。 451 Unavailable For Legal Reasons 用户请求非法资源，例如：由政府审查的网页。 五、服务端响应 Code Concept Explain 500 Internal Server Error 服务器遇到了不知道如何处理的情况。 501 Not Implemented 此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。 502 Bad Gateway 此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。 503 Service Unavailable 服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。 504 Gateway Timeout 当服务器作为网关，不能及时得到响应时返回此错误代码。 505 HTTP Version Not Supported 服务器不支持请求中所使用的HTTP协议版本。 506 Variant Also Negotiates 服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。 507 Insufficient Storage 服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。 508 Loop Detected (WebDAV) 服务器在处理请求时检测到无限循环。 510 Not Extended 客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。 511 Network Authentication Required 状态码指示客户端需要进行身份验证才能获得网络访问权限。","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://umlink.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[]},{"title":"如何查看服务端日志?","slug":"view-log","date":"2021-03-30T01:59:41.000Z","updated":"2021-03-30T02:48:54.104Z","comments":true,"path":"2021/03/30/view-log/","link":"","permalink":"https://umlink.github.io/2021/03/30/view-log/","excerpt":"","text":"一、直接查看文件内容 cat [-AbEnTv] 选项与参数 -A ：相当于-vET的整合， 课列出一些特殊字符而不是空白而已 -b ：列出行号，进针对非空白行做行号显示，空白行不会标记 -E ：将结尾换行符$显示出来 -n ：打印出行号，连同空白行也会有行号，与-b的选项不同 -T : 将[tab]键以^I显示出来 -v : 列出一些看不出来的特殊字符 tac（和cat打印顺序相反） 二、翻页查看 less less可前后翻页，不止向上查找，也可向下查找 按键/命令 [pagedown] ：向下翻页 [pageup] ：向上翻页 /字符串：在当前显示的内容（翻页进度位置），向下查找这个字符串关键字 ?字符串：向上查找字符串 n ：重复前一个查找，与/或?有关， 比如前一个命令是？表示向上查找，此时n会向上查找 N ：反向的重复前一个查找 g ：跳转到当前文件数据的第一行 G ：跳转到当前文件数据的最后一行 q ：退出当前文件的浏览 三、数据截取 head head命令用来提取文件的前n行，一般配合使用-n选项。当指定的行数为负数-x时，则会打印出除了后面x行的其他所有数据。 1head -n 10 error.log tail 从文件尾部截取数据。tail也是工作中最常用的命令，因为可以利用-f选项，一直刷新获取文件尾部最新数据。 选项与参数 -n : 查看后n行数据，注意当n后面值带“+”号表示从第x行开始， 如 tail -n +1000 test.txt -f : 展示文件后面 四、筛选日志 grep example：查看文件包含 ‘hello’ 12cat -n error.txt | grep &#39;hello&#39;tail -200f error.log | grep &#39;hello&#39; 五、其它 &gt;&gt; : 文件追加重定向命令 example：将 test.txt 的最后10行复制到hello.txt中 1tail -n 10 test.txt &gt;&gt; hello.txt 六、组合使用示例example: 查看文件 10 ~ 20 行 123head -n 20 text.txt | tail -n 10cat -n test.txt | head -n 20 | tail -n 10 参考文献：https://juejin.cn/post/6844904069627133966","categories":[{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"}]},{"title":"webpack 优化思路","slug":"opt-webpack","date":"2021-03-25T02:01:34.000Z","updated":"2021-03-25T02:02:49.304Z","comments":true,"path":"2021/03/25/opt-webpack/","link":"","permalink":"https://umlink.github.io/2021/03/25/opt-webpack/","excerpt":"","text":"优化方向 webpack-bundle-analyzer：文件大小分析 speed-measure-webpack-plugin 打包耗时分析 使用高版本的 webpack 和 nodejs 按需引入 搜小查找范围（loader） exclude/include (确定 loader 规则范围) resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找) resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段) resolve.extensions 尽可能减少后缀尝试的可能性 noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句) IgnorePlugin (完全排除模块) 合理使用alias 缓存 多进程/多实例构建：HappyPack(不维护了)、thread-loader 代码压缩 图片压缩或外链（压缩） 样式分离 （mini-css-extract-plugin） DLL 动态链接库 CommonsChunkPlugin =&gt; optimization.splitChunks 和 optimization.runtimeChunk CommonsChunkPlugin 公用包的抽离【react、lodash、moment、vue、vue-loaderK】 optimization.splitChunks.chunks: “all” 当前模块是公共模块（多处引用）或者模块来自 node_modules 当前模块大小大于 30kb 如果此模块是按需加载，并行请求的最大数量小于等于 5 如果此模块在初始页面加载，并行请求的最大数量小于等于 3","categories":[{"name":"webpack","slug":"webpack","permalink":"https://umlink.github.io/categories/webpack/"}],"tags":[{"name":"javascirpt","slug":"javascirpt","permalink":"https://umlink.github.io/tags/javascirpt/"},{"name":"nodejs","slug":"nodejs","permalink":"https://umlink.github.io/tags/nodejs/"}]},{"title":"ajax-hooks","slug":"ajax-hooks","date":"2021-03-25T01:58:25.000Z","updated":"2021-03-25T01:59:19.352Z","comments":true,"path":"2021/03/25/ajax-hooks/","link":"","permalink":"https://umlink.github.io/2021/03/25/ajax-hooks/","excerpt":"","text":"方法一：new实例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class AnyXHR &#123; constructor (beforeHooks = &#123;&#125;, afterHooks = &#123;&#125;) &#123; this.XHR = window.XMLHttpRequest this.beforeHooks = beforeHooks this.afterHooks = afterHooks this.init() &#125; init () &#123; let _this = this window.XMLHttpRequest = function () &#123; this._xhr = new _this.XHR() _this.overWrite(this) &#125; &#125; overWrite (proxyXHR) &#123; for (let key in proxyXHR._xhr) &#123; if (typeof proxyXHR._xhr[key] === &#x27;function&#x27;) &#123; this.overwriteMethod(key, proxyXHR) continue &#125; &#125; &#125; overwriteMethod (key, proxyXHR) &#123; let beforeHooks = this.beforeHooks let afterHooks = this.afterHooks proxyXHR[key] = (...args) =&gt; &#123; // 前置钩子 可拦截 if (beforeHooks[key] &amp;&amp; (beforeHooks[key].call(proxyXHR._xhr, args) === false)) return // 执行原生方法 const res = proxyXHR._xhr[key].apply(proxyXHR._xhr, args) // 后置钩子 afterHooks[key] &amp;&amp; afterHooks[key].call(proxyXHR._xhr, res) return res &#125; &#125;&#125;new AnyXHR(&#123; open: function (args) &#123; console.log(&#x27;前置钩子执行&#x27;) console.log(&#x27;open&#x27;, args) &#125;, onreadystatechange: function (args) &#123; console.log(&#x27;onreadystatechange&#x27;, args) &#125;&#125;, &#123; open: function () &#123; console.log(&#x27;后置钩子执行&#x27;) &#125;&#125;) 方法二：劫持原型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const ajaxHooks = &#123; init: function (hooks) &#123; let &#123; open = null, send = null &#125; = hooks; if (typeof window === &#x27;undefined&#x27;) return; const _openPrototype = window.XMLHttpRequest.prototype.open; const _sendPrototype = window.XMLHttpRequest.prototype.send; const openReplacement = function(openHook, openPrototype) &#123; return function (method, url, async, user, password) &#123; openHook.apply(this, arguments) return openPrototype.apply(this, arguments) &#125; &#125; const getHookByProps = props =&gt; &#123; return function () &#123; hooks[props] &amp;&amp; hooks[props].apply(this, arguments) this[`_$&#123;props&#125;`] &amp;&amp; this[`_$&#123;props&#125;`].apply(this, arguments); &#125; &#125; const sendReplacement = function(sendHook, sendPrototype) &#123; return function () &#123; const onMappingKeyList = [ onreadystatechange, onloadstart, onloadend, onerror, ontimeout, onabort ] onMappingKeyList.forEach(key =&gt; &#123; this[&#x27;_&#x27; + key] = this[key] ? this[key] : null; this[key] = getHookByProps(key) &#125;) sendHook.apply(this, arguments) return sendPrototype.apply(this, arguments) &#125; &#125; window.XMLHttpRequest.prototype.open = openReplacement(open, _openPrototype) window.XMLHttpRequest.prototype.send = sendReplacement(send, _sendPrototype) &#125;&#125;export default ajaxHooks","categories":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/tags/javascript/"}]},{"title":"关于页面的平滑滚动","slug":"smooth-scroll","date":"2021-03-25T01:54:43.000Z","updated":"2021-03-25T01:57:05.594Z","comments":true,"path":"2021/03/25/smooth-scroll/","link":"","permalink":"https://umlink.github.io/2021/03/25/smooth-scroll/","excerpt":"","text":"1. toTop123456789const scrollToTop = () =&gt; &#123; const c = document.documentElement.scrollTop || document.body.scrollTop; if (c &gt; 0) &#123; window.requestAnimationFrame(scrollToTop); window.scrollTo(0, c - c / 8); &#125;&#125;;scrollToTop(); 2. to 指定位置const smoothScroll = element =&gt; document.querySelector(element).scrollIntoView(&#123; behavior: &#39;smooth&#39; &#125;); smoothScroll(&#39;#fooBar&#39;); smoothScroll(&#39;.fooBar&#39;);","categories":[{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/categories/javascript/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/tags/chrome/"}]},{"title":"浏览器拿到 html 到渲染成页面发生了什么？","slug":"html-page","date":"2021-03-25T01:49:28.000Z","updated":"2021-03-25T01:52:57.730Z","comments":true,"path":"2021/03/25/html-page/","link":"","permalink":"https://umlink.github.io/2021/03/25/html-page/","excerpt":"","text":"一、从获得 Html 到页面渲染的全部流程1.1 DOM 树构建渲染器进程接受到的数据也就是 HTML。渲染器进程的核心任务就是把 html、css、js、image 等资源渲染成用户可以交互的 web 页面。渲染器进程的主线程将 html 进行解析，构造 DOM 数据结构。DOM 也就是文档对象模型，是浏览器对页面在其内部的表示形式，是 web 开发程序员可以通过 JS 与之交互的数据结构和 API。html 首先通过 tokeniser 标记化，通过词法分析将输入的 html 内容解析成多个标记，根据识别后的标记进行 DOM 树构造，在 DOM 树构建过程中会创建 document 对象，然后以 document 的为根节点的 DOM 树，不断进行修改，向其中添加各种元素。 1.2 渲染阻塞html 代码中往往会引入一些额外的资源，比如图片、CSS、JS 脚本等，图片和 CSS 这些资源需要通过网络下载或从缓存中直接加载，这些资源不会阻塞 html 的解析，因为他们不会影响 DOM 树的生成，但当 HTML 解析过程中遇到 script 标签，就会停止 html 解析流程，转而去加载解析并且执行 JS。这是因为浏览器并不知道 JS 执行是否会改变当前页面的 HTML 结构，如果 JS 代码里用了 document.write 方法来修改 html，之前的和 html 解析就没有任何意义了，这也就是为什么我们一直说要把 script 标签要放在合适的位置，或者使用 async 或 defer 属性来异步加载执行 JS。 1.3 Layout Tree在 html 解析完成后，我们就会获得一个 DOM Tree（树），但我们还不知道 DOM Tree 上的每个节点应该长什么样子，主线程需要解析 CSS，并确定每个 DOM 节点的计算样式，即使你没有提供自定义的 CSS 样式，浏览器会有自己默认的样式表，比如 h2 的字体要比 h3 的大。在知道 DOM 结构和每个节点的样式后，我们接下来需要知道每个节点需要放在页面上的哪个位置，也就是节点的坐标以及该节点需要占用多大的区域，这个阶段被称为 layout 布局，主线程通过遍历 dom 和计算好的样式来生成 Layout Tree。Layout Tree 上的每个节点都记录了 x、y 坐标和边框尺寸。这需要注意的是 DOM Tree 和 Layout Tree 并不是一一对应的，设置了 display:none 的节点不会出现在 Layout Tree 上，而在 before 伪类中添加了 content 值的元素 content 中的内容会出现在 Layout Tree 上，不会出现在 DOM 树里，这是因为 DOM 是通过 HTML 解析获得的，并不关系样式，而 Layout Tree 是根据 DOM 和计算好的样式来生成，Layout Tree 是和最后展示在屏幕上节点是对应的。 1.4 绘制（paint）现在我们已经知道了元素的大小形状和位置，但还不知道以什么样的顺序绘制（paint）这个节点，例如 z-index 这个属性会影响节点绘制的层级关系，如果按照 dom 的层级结构来绘制页面则会导致错误的渲染。所以为了保证在屏幕上展示正确的层级，主线程遍历 Layout Tree 创建一个绘制记录表（Paint Record），该表记录了绘制的顺序，这个阶段配称为绘制（Paint）。 1.5 栅格化现在知道了文档的绘制顺序，终于到了该把这些信息转化成像素点显示在屏幕上了，这个行为被称为栅格化（Rastering）。chrome 最早使用了一种很简单的方式，只栅格化用户可视区域的内容，当用户滚动页面时，再栅格化更多的内容来填充缺失的部分，这种方式带来的问题就是会导致展示延迟。现在 chrome 进行了优化升级，使用了一种更为复杂的栅格化流程叫做合成（compositing），合成是一种将页面各个部分分成多个图层，分别对其进行栅格化，并在合成器线程（compositor Thread）中单独进行合成页面，简单来说就是页面所有的元素按照某种规则进行分图层，并把图层都栅格化好了，然后只需要把可视区的内容组合成一帧展示给用户即可。 1.6 layer tree主线程遍历 Layout Tree 生成 layer tree，当 Layer Tree 生成完毕和绘制顺序确定后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分为许多图块（tiles），然后将每个图块发送给栅格化线程（Raster Thread），栅格化线程栅格化每个图块，并将他们存储在 GPU 内存中，当图块栅格化完成后，合成器线程将收集成为 draw quads 的图块信息，这些信息里记录了图块在内存中的位置和在页面的那个位置绘制图块的信息，根据这些信息合成器线程生成一个合成器帧（Compositor Frame）然后合成器 Frame（帧）通过 IPC 传递给浏览器进程，接着浏览器进程将合成器帧传送到 GPU，然后 GPU 渲染展示到屏幕上。当页面发生变化时，比如滚动了当前的页面，都会生成一个新的合成器帧，新的帧再传给 GPU，然后再次渲染到屏幕上。 二、为什么栅格线程使用 GPU 计算而不是 CPU 计算？CPU 与 GPU:CPU 和 GPU 作为计算机中最重要的两个计算单元直接决定了计算性能。CPU是计算机的大脑，负责处理各种不同的任务。在过去，大多数 CPU 是单芯片的，核心被安置在同一个芯片上。更新的 CPU 可以支持多核心，运算能力大大加强。而最新的的 cpu 已经达到 10 核心 20 线程数的能力了。GPU是另一个计算机的组成部分，与 CPU 不同，GPU 更擅长利用多核心同时处理单一的任务。像命名那样，GPU 最初被用于处理图像。这就是为什么使用 GPU 可以更快、更顺畅的渲染页面内容。随着 GPU 的发展，越来越多的计算任务也可以使用 GPU 来处理。甚至有人说 GPU 是人工智能的大功臣，可见 GPU 已经不再仅用于图像处理上了。","categories":[{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"}],"tags":[]},{"title":"linux 查看文件大小","slug":"look-file-size","date":"2021-03-25T01:31:57.000Z","updated":"2021-03-25T01:48:08.360Z","comments":true,"path":"2021/03/25/look-file-size/","link":"","permalink":"https://umlink.github.io/2021/03/25/look-file-size/","excerpt":"","text":"命令及说明查看整个磁盘大小12345678df -h----------输出内容如下：devtmpfs 909M 0 909M 0% /devtmpfs 919M 24K 919M 1% /dev/shmtmpfs 919M 456K 919M 1% /runtmpfs 919M 0 919M 0% /sys/fs/cgroup/dev/vda1 50G 3.3G 44G 7% /tmpfs 184M 0 184M 0% /run/user/0 查看整个磁盘大小1234567891011du -sh *----------输出内容如下：154M bin4.0K etc4.0K games14M include737M lib182M lib6461M libexec562M local52M sbin 查看指定文件大小123du -sk share----------输出内容如下：358428 share 查看前 10 文件大小列表123456789101112du -s * | sort -nr | head----------输出内容如下：2234776 usr933900 var122176 boot39632 etc12884 tmp448 run148 root16 lost+found8 opt4 srv 查看文件个数1ls | wc -l 统计当前文件夹(目录)大小，并按文件大小排序1du -sh * | sort -n du 常用选项1234567-h：以人类可读的方式显示-a：显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小-s：显示目录占用的磁盘空间大小，不要显示其下子目录和文件占用的磁盘空间大小-c：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和--apparent-size：显示目录或文件自身的大小-l ：统计硬链接占用磁盘空间的大小-L：统计符号链接所指向的文件占用的磁盘空间大小","categories":[{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"}]},{"title":"股票大作手回忆录","slug":"stock-hand-recall","date":"2020-01-21T07:30:25.000Z","updated":"2021-03-24T16:23:29.227Z","comments":true,"path":"2020/01/21/stock-hand-recall/","link":"","permalink":"https://umlink.github.io/2020/01/21/stock-hand-recall/","excerpt":"","text":"第一章 独立特行的少年赌客人 在个㢟规律性波动中赚钱 第二章 独立特行的少年赌客人 永远不要对时长生气 第三章 重返华尔街遭受重创 适应股市，而不是让股市适应你 第四章 卧薪尝胆三反华尔街 找到正确的操作方法才能赚钱 第五章 “老火鸡”的至理名言 成功的秘诀再约预判大势和百信等待 第六章 最昂贵的一课 听信别人不如相信自己 第七章 老手怀特的故事 判断何时的出手时机（稳住，涨时试探性的买入，不要一味的找低谷买入） 第八章 再次破产后的绝地反击 顺势而为，择机而动","categories":[],"tags":[{"name":"股票","slug":"股票","permalink":"https://umlink.github.io/tags/%E8%82%A1%E7%A5%A8/"}]},{"title":"小计浏览器缓存策略","slug":"cache-control","date":"2020-01-21T06:12:24.000Z","updated":"2021-03-24T16:23:29.268Z","comments":true,"path":"2020/01/21/cache-control/","link":"","permalink":"https://umlink.github.io/2020/01/21/cache-control/","excerpt":"","text":"一、强缓存 缓存未过期只取本地， 资源更新则GG。 Cache-Control public, max-age=xxx Expire 二、协商缓存 每次都请求服务器？ 替换路径？ hash 每次打包时生成的hash,不可用 chunkhash 单独chunk 的hash contenthash 内容变化时的hash 三、ETag &amp; Last-Modified Nginx官方默认的ETag计算方式是为”文件最后修改时间16进制-文件长度16进制”。例：ETag： “59e72c84-2404” Express框架使用了serve-static中间件来配置缓存方案，其中，使用了一个叫etag的npm包来实现etag计算 请求头带上了if-modified-since和if-none-match两个字段，则先判断etag，再判断last-modified","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://umlink.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[{"name":"缓存","slug":"缓存","permalink":"https://umlink.github.io/tags/%E7%BC%93%E5%AD%98/"}]}],"categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://umlink.github.io/categories/LeetCode/"},{"name":"浏览器","slug":"浏览器","permalink":"https://umlink.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"服务器","slug":"服务器","permalink":"https://umlink.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"webpack","slug":"webpack","permalink":"https://umlink.github.io/categories/webpack/"},{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/categories/chrome/"},{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/categories/javascript/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://umlink.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"linux","slug":"linux","permalink":"https://umlink.github.io/tags/linux/"},{"name":"javascirpt","slug":"javascirpt","permalink":"https://umlink.github.io/tags/javascirpt/"},{"name":"nodejs","slug":"nodejs","permalink":"https://umlink.github.io/tags/nodejs/"},{"name":"javascript","slug":"javascript","permalink":"https://umlink.github.io/tags/javascript/"},{"name":"chrome","slug":"chrome","permalink":"https://umlink.github.io/tags/chrome/"},{"name":"股票","slug":"股票","permalink":"https://umlink.github.io/tags/%E8%82%A1%E7%A5%A8/"},{"name":"缓存","slug":"缓存","permalink":"https://umlink.github.io/tags/%E7%BC%93%E5%AD%98/"}]}